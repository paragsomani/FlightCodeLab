/**
 * 
 */
package com.ideas.flight;

import java.util.ArrayList;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Set;

/**
 * @author PARAGS
 *
 */
public class ShortestPath {
	
	
	private List<String> visitedNodes;
	private List<String> availableNodes;
	
	private int neighbourMatrix[][];
	
	private int distance[];
	private int numberOfNodes ;
	
	
	
	public ShortestPath( int numberOfNodes) {
		super();
		this.visitedNodes = new ArrayList<String>();
		this.availableNodes = new ArrayList<String>();
		this.neighbourMatrix = new int[numberOfNodes][numberOfNodes];
		this.distance = new int[numberOfNodes];
		this.numberOfNodes = numberOfNodes;
	}

	public void shortestPathAlgo(String startNode, String endNode)
	{
		String curNode ;
		int positionOfCurNode = 0 ;
		for(int i = 0 ; i < getAvailableNodes().size(); i++)
		{
			Iterator avlItr = getAvailableNodes().iterator();
			while(avlItr.hasNext())
			{
				//Retrieve one by one node and point it as curNode and once done add it to visited node set
				curNode = avlItr.next().toString();
				System.out.println("Current Node is: "+curNode);
				
				findMinFlights(curNode,startNode,endNode, positionOfCurNode);
				
				visitedNodes.add(curNode);
				positionOfCurNode++;
			}
			
		}
		
	}
	
	private void findMinFlights(String curNode, String startNode, String endNode, int positionOfCurNode ) {
		// 
		for(int i = 0; i<neighbourMatrix.length ; i++)
		{
			
			for(int j=0; j < neighbourMatrix[i].length ; j++)
			{
				if(neighbourMatrix[i][j] != 0)
				{
					System.out.println("Neightbour for "+i+" is: "+(j+1)+" with filights "+ neighbourMatrix[i][j]);
					
					if(distance[j] > neighbourMatrix[i][j]+(distance[i]==999?0:distance[i]))
					{
						distance[j] = neighbourMatrix[i][j] + (distance[i]==999?0:distance[i]);
					}
					
				}
			}
		}
		
	}

	/**
	 * @param args
	 */
	public static void main(String[] args) {
		
		ShortestPath shortestPath = new ShortestPath(5);
		
		//Hard coding of number if nodes to 5
		//TODO: Accept the input from command prompt
		shortestPath.setNumberOfNodes(5);
		shortestPath.setAvailableNodes(shortestPath.availableNodes);
		shortestPath.setNeighbourMatrix(shortestPath.neighbourMatrix);
		shortestPath.setDistance(shortestPath.distance);
		shortestPath.shortestPathAlgo("1", "2");
		shortestPath.printDistance();
		
		
		
	}

	public void printDistance() {
		for(int i = 0 ; i < getDistance().length ; i++)
		{
			System.out.println("Node "+(i+1)+" has planes "+distance[i]);
		}
		
	}

	/**
	 * @return the visitedNodes
	 */
	public List<String> getVisitedNodes() {
		return visitedNodes;
	}

	/**
	 * @param visitedNodes the visitedNodes to set
	 */
	public void setVisitedNodes(List<String> visitedNodes) {
		this.visitedNodes = visitedNodes;
	}

	/**
	 * @return the availableNodes
	 */
	public List<String> getAvailableNodes() {
		return availableNodes;
	}

	/**
	 * @param availableNodes the availableNodes to set
	 * TODO: change it String, accept input form command prompt
	 */
	public void setAvailableNodes(List<String> availableNodes) {
		availableNodes.add("1");
		availableNodes.add("2");
		availableNodes.add("3");
		availableNodes.add("4");
		availableNodes.add("5");
		
		this.availableNodes = availableNodes;
	}

	/**
	 * @return the neighbourMatrix
	 */
	public int[][] getNeighbourMatrix() {
		return neighbourMatrix;
	}

	/**
	 * @param neighbourMatrix the neighbourMatrix to set
	 * TODO: Accept input from command prompt
	 * 
	 */
	public void setNeighbourMatrix(int[][] neighbourMatrix) {
		neighbourMatrix=new int[][]{ 
									{0,9,6,5,3},
									{0,0,0,0,0},
									{0,2,0,4,0},
									{0,0,0,0,0},
									{0,0,0,0,0}									
							};
		this.neighbourMatrix = neighbourMatrix;
	}

	/**
	 * @return the distance
	 */
	public int[] getDistance() {
		return distance;
	}

	/**
	 * @param distance the distance to set
	 */
	public void setDistance(int[] distance) {
		
		//Assumption: 999 is infinite value
		distance = new int[]{999,999,999,999,999};
		this.distance = distance;
	}

	/**
	 * @return the numberOfNodes
	 */
	public int getNumberOfNodes() {
		return numberOfNodes;
	}

	/**
	 * @param numberOfNodes the numberOfNodes to set
	 */
	public void setNumberOfNodes(int numberOfNodes) {
		this.numberOfNodes = numberOfNodes;
	}
	
	

}
